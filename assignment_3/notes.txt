INPUT:

- AST tree ===> node bắt đầu là Program. Traverse bằng cách gọi attribute của class đó.
- Tất cả attribute thuộc từng class được define trong file AST.py
- Thực hiện các hàm visit trong file StaticCheck.py để statick checking


OUTPUT:
- Raise các error
- Error being worked on:
    - Undeclared
    - Redeclared


WORKING PROGRESS: Declare stuffs
- Lưu trữ tên các identifier đã được tạo ra trong một mảng 2 chiều:
    - Trong đó chiều rộng hoạt động một stack để xử lý trong trường hợp đi từ scope lớn đến scope bé
    - Chiều sâu hoạt động như một list để tham khảo các biến đã được thêm vào.

- Possible cases for function redeclaration:
    - Redeclared trong parameter
    - Redeclared trong block:
        - Declare 2 biến cùng tên trong block
        - Declare 1 biến cùng tên với biến đã khai báo tại parameter.

    - Undeclared:
        - Đối với biến. Biến được dùng khi nào?:
            - Assign statement:
                - LHS expression
                - RHS expression
            - if statement
            - vardecl
            - assignment statement
            - for statement
            - return statement
            - function call statement (call expr)
        - Algorithm:
            - Travel qua tất cả các statement có trong chương trình
            - Trong mỗi statement đó sẽ thực hiện check xem nếu tồn tại exression có sử dụng identifier
            - Logic check việc sử dụng identifier trong expression:
                - Truyền vào parameter tại câu lệnh visit scope tại đoạn visit đó
                - Ở mỗi method visit, check tính hợp lệ của biến nằm trong method đó
                - Bằng cách, một lần nữa - visit đến method Id() truyền thông số env của scope vào => tất cả những logic kiểm tra đều nằm ở method Id()
            ===> Lưu ý: method visit Id không trả về giá trị, chỉ được dùng để xác định undeclared thôi.
            ===> Để lấy tên của identifier sử dụng hàm getIdName()


- Type Mismatch in expression: 4 data types: String, Boolean, Number (float), Array
	- Binary and unary expression:
		- Operators for NUMBER operands' type: PLUS, MINUS, MULTIPLY, DIVIDE, MODULO, NEGATION ===> Result in a NUMBER type
		- Operators for BOOLEAN operands' type: not and or ===> result in a BOOLEAN type
		- Operators for STRING operands' type: ...  (concatenation)===> result in a STRING type
		- Operators for REALATIONAL operations: NUMBER - (= != < > <= >=) STRING - (==)

		- Cần return kiểu từ CallExpr cũng như ArrExpr:
		
		- CallExpr: Theo như mô tả thì function chỉ được khai báo ở global scope. Vì vậy mà để lưu trữ được return type của một function nào đó, cần có một data structure hoạt động ở global scope. Mỗi khi function được khai báo thì sẽ lưu lại return type của function đó bằng data structure. Vậy thì data structure sử dụng sẽ là dict ==> ví dụ: funcType['<function identifier>'] = NumberType/BoolType/StringType/ArrayType/None. Return type sẽ được truy xuất thông qua việc trả về return type trong hàm visitBlock.


		- Current problem:
			- làm thế nào để xác định type của một hàm dựa trên return value ===> nhiều return statement với kiểu return khác nhau xử lý như thế nào?
				- Cần xác định xem những statement nào sẽ trả về type. Hoặc sẽ trả về những giá trị nào. Các loại statement:
					- Variable declaration ===> Có thể không cần trả về gì. Lưu type trong dict param đã tạo ra
					- Assignment ===> Có thể không cần trả về gì.
					- If ====> Trả về type nếu như trong if statement có tồn tại return statement
					- For	===> Trả về type nếu như trong for statement có tồn tại return statement
					- Break / Continue ===> Không cần trả về
					- Return	===> Trả về type của expression 
					- Function call ===> Không cần trả về gì. Tuy nhiên cần check kiểu argument truyền vào có đúng với parameter được define cho hàm đó hay không
					- Block ===> Trả về type nếu như trong block statement có tồn tại return statemnet

				- Ở thời điểm hiện tại chỉ assume return type của một hàm dựa trên giá trị trả về của return statement. Tuy nhiên, phải chăng các statement khác cũng trả về một statement gì đó ?

			- Làm thế nào để check value truyền vào param có đúng hay không
			- Array xử lý như thế nào


