# Generated from c://Users//takho//Desktop//principles_of_programming_languages//src//main//zcode//parser//ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,28,352,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,5,4,113,
        8,4,10,4,12,4,116,9,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,142,8,
        8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,204,8,11,1,12,1,12,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,218,8,13,1,14,
        1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,242,8,20,1,21,4,21,
        245,8,21,11,21,12,21,246,1,21,1,21,5,21,251,8,21,10,21,12,21,254,
        9,21,3,21,256,8,21,1,21,3,21,259,8,21,1,21,4,21,262,8,21,11,21,12,
        21,263,1,21,1,21,3,21,268,8,21,1,22,1,22,1,23,1,23,3,23,274,8,23,
        1,23,4,23,277,8,23,11,23,12,23,278,1,24,1,24,5,24,283,8,24,10,24,
        12,24,286,9,24,1,25,1,25,1,25,1,25,5,25,292,8,25,10,25,12,25,295,
        9,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,
        1,29,1,29,1,29,1,30,1,30,1,30,1,30,5,30,316,8,30,10,30,12,30,319,
        9,30,1,30,3,30,322,8,30,1,30,1,30,1,31,1,31,1,31,1,31,5,31,330,8,
        31,10,31,12,31,333,9,31,1,31,1,31,1,31,1,31,3,31,339,8,31,1,31,1,
        31,1,32,4,32,344,8,32,11,32,12,32,345,1,32,1,32,1,33,1,33,1,33,0,
        0,34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,0,47,
        0,49,23,51,24,53,0,55,0,57,0,59,0,61,25,63,26,65,27,67,28,1,0,17,
        2,0,10,10,13,13,4,0,37,37,42,43,45,45,47,47,1,0,10,10,2,0,60,60,
        62,62,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,3,0,65,90,95,95,
        97,122,4,0,48,57,65,90,95,95,97,122,5,0,10,10,13,13,34,34,39,39,
        92,92,7,0,39,39,92,92,98,98,102,102,110,110,114,114,116,116,3,0,
        34,34,39,39,92,92,2,1,10,10,13,13,3,0,10,10,13,13,34,34,1,0,39,39,
        1,0,34,34,3,0,8,9,12,13,32,32,385,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,49,1,0,
        0,0,0,51,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
        0,0,1,69,1,0,0,0,3,85,1,0,0,0,5,96,1,0,0,0,7,104,1,0,0,0,9,108,1,
        0,0,0,11,117,1,0,0,0,13,124,1,0,0,0,15,128,1,0,0,0,17,141,1,0,0,
        0,19,143,1,0,0,0,21,150,1,0,0,0,23,203,1,0,0,0,25,205,1,0,0,0,27,
        217,1,0,0,0,29,219,1,0,0,0,31,222,1,0,0,0,33,224,1,0,0,0,35,226,
        1,0,0,0,37,228,1,0,0,0,39,230,1,0,0,0,41,241,1,0,0,0,43,267,1,0,
        0,0,45,269,1,0,0,0,47,271,1,0,0,0,49,280,1,0,0,0,51,287,1,0,0,0,
        53,299,1,0,0,0,55,301,1,0,0,0,57,304,1,0,0,0,59,307,1,0,0,0,61,311,
        1,0,0,0,63,325,1,0,0,0,65,343,1,0,0,0,67,349,1,0,0,0,69,70,5,97,
        0,0,70,71,5,114,0,0,71,72,5,114,0,0,72,73,5,97,0,0,73,74,5,121,0,
        0,74,75,5,101,0,0,75,76,5,120,0,0,76,77,5,112,0,0,77,78,5,114,0,
        0,78,79,5,101,0,0,79,80,5,115,0,0,80,81,5,115,0,0,81,82,5,105,0,
        0,82,83,5,111,0,0,83,84,5,110,0,0,84,2,1,0,0,0,85,86,5,101,0,0,86,
        87,5,120,0,0,87,88,5,112,0,0,88,89,5,114,0,0,89,90,5,101,0,0,90,
        91,5,115,0,0,91,92,5,115,0,0,92,93,5,105,0,0,93,94,5,111,0,0,94,
        95,5,110,0,0,95,4,1,0,0,0,96,97,5,100,0,0,97,98,5,121,0,0,98,99,
        5,110,0,0,99,100,5,97,0,0,100,101,5,109,0,0,101,102,5,105,0,0,102,
        103,5,99,0,0,103,6,1,0,0,0,104,105,5,118,0,0,105,106,5,97,0,0,106,
        107,5,114,0,0,107,8,1,0,0,0,108,109,5,35,0,0,109,110,5,35,0,0,110,
        114,1,0,0,0,111,113,8,0,0,0,112,111,1,0,0,0,113,116,1,0,0,0,114,
        112,1,0,0,0,114,115,1,0,0,0,115,10,1,0,0,0,116,114,1,0,0,0,117,118,
        5,115,0,0,118,119,5,116,0,0,119,120,5,114,0,0,120,121,5,105,0,0,
        121,122,5,110,0,0,122,123,5,103,0,0,123,12,1,0,0,0,124,125,5,46,
        0,0,125,126,5,46,0,0,126,127,5,46,0,0,127,14,1,0,0,0,128,129,5,98,
        0,0,129,130,5,111,0,0,130,131,5,111,0,0,131,132,5,108,0,0,132,16,
        1,0,0,0,133,134,5,110,0,0,134,135,5,111,0,0,135,142,5,116,0,0,136,
        137,5,97,0,0,137,138,5,110,0,0,138,142,5,100,0,0,139,140,5,111,0,
        0,140,142,5,114,0,0,141,133,1,0,0,0,141,136,1,0,0,0,141,139,1,0,
        0,0,142,18,1,0,0,0,143,144,5,110,0,0,144,145,5,117,0,0,145,146,5,
        109,0,0,146,147,5,98,0,0,147,148,5,101,0,0,148,149,5,114,0,0,149,
        20,1,0,0,0,150,151,7,1,0,0,151,22,1,0,0,0,152,153,5,114,0,0,153,
        154,5,101,0,0,154,155,5,116,0,0,155,156,5,117,0,0,156,157,5,114,
        0,0,157,204,5,110,0,0,158,159,5,102,0,0,159,160,5,117,0,0,160,161,
        5,110,0,0,161,204,5,99,0,0,162,163,5,102,0,0,163,164,5,111,0,0,164,
        204,5,114,0,0,165,166,5,117,0,0,166,167,5,110,0,0,167,168,5,116,
        0,0,168,169,5,105,0,0,169,204,5,108,0,0,170,171,5,98,0,0,171,204,
        5,121,0,0,172,173,5,98,0,0,173,174,5,114,0,0,174,175,5,101,0,0,175,
        176,5,97,0,0,176,204,5,107,0,0,177,178,5,99,0,0,178,179,5,111,0,
        0,179,180,5,110,0,0,180,181,5,116,0,0,181,182,5,105,0,0,182,183,
        5,110,0,0,183,184,5,117,0,0,184,204,5,101,0,0,185,186,5,105,0,0,
        186,204,5,102,0,0,187,188,5,101,0,0,188,189,5,108,0,0,189,190,5,
        115,0,0,190,204,5,101,0,0,191,192,5,101,0,0,192,193,5,108,0,0,193,
        194,5,105,0,0,194,204,5,102,0,0,195,196,5,98,0,0,196,197,5,101,0,
        0,197,198,5,103,0,0,198,199,5,105,0,0,199,204,5,110,0,0,200,201,
        5,101,0,0,201,202,5,110,0,0,202,204,5,100,0,0,203,152,1,0,0,0,203,
        158,1,0,0,0,203,162,1,0,0,0,203,165,1,0,0,0,203,170,1,0,0,0,203,
        172,1,0,0,0,203,177,1,0,0,0,203,185,1,0,0,0,203,187,1,0,0,0,203,
        191,1,0,0,0,203,195,1,0,0,0,203,200,1,0,0,0,204,24,1,0,0,0,205,206,
        7,2,0,0,206,26,1,0,0,0,207,218,5,61,0,0,208,209,5,33,0,0,209,218,
        5,61,0,0,210,218,7,3,0,0,211,212,5,60,0,0,212,218,5,61,0,0,213,214,
        5,62,0,0,214,218,5,61,0,0,215,216,5,61,0,0,216,218,5,61,0,0,217,
        207,1,0,0,0,217,208,1,0,0,0,217,210,1,0,0,0,217,211,1,0,0,0,217,
        213,1,0,0,0,217,215,1,0,0,0,218,28,1,0,0,0,219,220,5,60,0,0,220,
        221,5,45,0,0,221,30,1,0,0,0,222,223,5,40,0,0,223,32,1,0,0,0,224,
        225,5,41,0,0,225,34,1,0,0,0,226,227,5,91,0,0,227,36,1,0,0,0,228,
        229,5,93,0,0,229,38,1,0,0,0,230,231,5,44,0,0,231,40,1,0,0,0,232,
        233,5,116,0,0,233,234,5,114,0,0,234,235,5,117,0,0,235,242,5,101,
        0,0,236,237,5,102,0,0,237,238,5,97,0,0,238,239,5,108,0,0,239,240,
        5,115,0,0,240,242,5,101,0,0,241,232,1,0,0,0,241,236,1,0,0,0,242,
        42,1,0,0,0,243,245,3,45,22,0,244,243,1,0,0,0,245,246,1,0,0,0,246,
        244,1,0,0,0,246,247,1,0,0,0,247,255,1,0,0,0,248,252,5,46,0,0,249,
        251,3,45,22,0,250,249,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,
        253,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,255,248,1,0,0,0,255,
        256,1,0,0,0,256,258,1,0,0,0,257,259,3,47,23,0,258,257,1,0,0,0,258,
        259,1,0,0,0,259,268,1,0,0,0,260,262,3,45,22,0,261,260,1,0,0,0,262,
        263,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,265,1,0,0,0,265,
        266,3,47,23,0,266,268,1,0,0,0,267,244,1,0,0,0,267,261,1,0,0,0,268,
        44,1,0,0,0,269,270,7,4,0,0,270,46,1,0,0,0,271,273,7,5,0,0,272,274,
        7,6,0,0,273,272,1,0,0,0,273,274,1,0,0,0,274,276,1,0,0,0,275,277,
        3,45,22,0,276,275,1,0,0,0,277,278,1,0,0,0,278,276,1,0,0,0,278,279,
        1,0,0,0,279,48,1,0,0,0,280,284,7,7,0,0,281,283,7,8,0,0,282,281,1,
        0,0,0,283,286,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,50,1,0,
        0,0,286,284,1,0,0,0,287,293,3,53,26,0,288,292,8,9,0,0,289,292,3,
        57,28,0,290,292,3,55,27,0,291,288,1,0,0,0,291,289,1,0,0,0,291,290,
        1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,296,
        1,0,0,0,295,293,1,0,0,0,296,297,3,53,26,0,297,298,6,25,0,0,298,52,
        1,0,0,0,299,300,5,34,0,0,300,54,1,0,0,0,301,302,5,39,0,0,302,303,
        5,34,0,0,303,56,1,0,0,0,304,305,5,92,0,0,305,306,7,10,0,0,306,58,
        1,0,0,0,307,308,5,92,0,0,308,309,5,92,0,0,309,310,8,10,0,0,310,60,
        1,0,0,0,311,317,3,53,26,0,312,316,8,11,0,0,313,316,3,55,27,0,314,
        316,3,57,28,0,315,312,1,0,0,0,315,313,1,0,0,0,315,314,1,0,0,0,316,
        319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,321,1,0,0,0,319,
        317,1,0,0,0,320,322,7,12,0,0,321,320,1,0,0,0,322,323,1,0,0,0,323,
        324,6,30,1,0,324,62,1,0,0,0,325,331,3,53,26,0,326,330,8,13,0,0,327,
        330,3,55,27,0,328,330,3,57,28,0,329,326,1,0,0,0,329,327,1,0,0,0,
        329,328,1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,
        332,338,1,0,0,0,333,331,1,0,0,0,334,335,5,92,0,0,335,339,8,10,0,
        0,336,337,7,14,0,0,337,339,8,15,0,0,338,334,1,0,0,0,338,336,1,0,
        0,0,339,340,1,0,0,0,340,341,6,31,2,0,341,64,1,0,0,0,342,344,7,16,
        0,0,343,342,1,0,0,0,344,345,1,0,0,0,345,343,1,0,0,0,345,346,1,0,
        0,0,346,347,1,0,0,0,347,348,6,32,3,0,348,66,1,0,0,0,349,350,9,0,
        0,0,350,351,6,33,4,0,351,68,1,0,0,0,24,0,114,141,203,217,241,246,
        252,255,258,263,267,273,278,284,291,293,315,317,321,329,331,338,
        345,5,1,25,0,1,30,1,1,31,2,6,0,0,1,33,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    DYNAMIC_TYPE = 3
    VAR_TYPE = 4
    COMMENT = 5
    STRING_TYPE = 6
    STRING_OPERATOR = 7
    BOOL_TYPE = 8
    LOGIC_OPERATOR = 9
    NUMBER_TYPE = 10
    ARITHMETIC_OPERATORS = 11
    KEYWORD = 12
    NEWLINE = 13
    RELATIONAL_OPERATOR = 14
    ASSIGN_OPERATOR = 15
    OPEN_PARENTHESIS = 16
    CLOSE_PARENTHESIS = 17
    OPEN_BRACKET = 18
    CLOSE_BRACKET = 19
    COMMA = 20
    BOOLEAN = 21
    NUMBER = 22
    IDENTIFIER = 23
    STRING = 24
    UNCLOSE_STRING = 25
    ILLEGAL_ESCAPE = 26
    WS = 27
    ERROR_CHAR = 28

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'arrayexpression'", "'expression'", "'dynamic'", "'var'", "'string'", 
            "'...'", "'bool'", "'number'", "'<-'", "'('", "')'", "'['", 
            "']'", "','" ]

    symbolicNames = [ "<INVALID>",
            "DYNAMIC_TYPE", "VAR_TYPE", "COMMENT", "STRING_TYPE", "STRING_OPERATOR", 
            "BOOL_TYPE", "LOGIC_OPERATOR", "NUMBER_TYPE", "ARITHMETIC_OPERATORS", 
            "KEYWORD", "NEWLINE", "RELATIONAL_OPERATOR", "ASSIGN_OPERATOR", 
            "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", "OPEN_BRACKET", "CLOSE_BRACKET", 
            "COMMA", "BOOLEAN", "NUMBER", "IDENTIFIER", "STRING", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE", "WS", "ERROR_CHAR" ]

    ruleNames = [ "T__0", "T__1", "DYNAMIC_TYPE", "VAR_TYPE", "COMMENT", 
                  "STRING_TYPE", "STRING_OPERATOR", "BOOL_TYPE", "LOGIC_OPERATOR", 
                  "NUMBER_TYPE", "ARITHMETIC_OPERATORS", "KEYWORD", "NEWLINE", 
                  "RELATIONAL_OPERATOR", "ASSIGN_OPERATOR", "OPEN_PARENTHESIS", 
                  "CLOSE_PARENTHESIS", "OPEN_BRACKET", "CLOSE_BRACKET", 
                  "COMMA", "BOOLEAN", "NUMBER", "DIGIT", "EXPONENT", "IDENTIFIER", 
                  "STRING", "DOUBLE_QUOTE", "DOUBLE_QUOTE_NOTATION", "LEGAL_ESCAPE_SEQUENCE", 
                  "ILLEGAL_ESCAPE_SEQUENCE", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", 
                  "WS", "ERROR_CHAR" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[25] = self.STRING_action 
            actions[30] = self.UNCLOSE_STRING_action 
            actions[31] = self.ILLEGAL_ESCAPE_action 
            actions[33] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

            	self.text = self.text[1:-1]
            	#print("this is a string: "+self.text)

     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:

            	self.text = self.text[1:]
            	print("this is an unclosed string: "+repr(self.text))
            	
            	#Windows case
            	tmp = self.text[::-1].find("\n")

            	if (tmp != -1):
            		if (self.text[::-1].find("\n\r")!=-1):
            			self.text = self.text[0:len(self.text)-tmp-2]
            			print("windows case: "+repr(self.text))
            			raise UncloseString(self.text)
            			return
            		else:
            			#Linux case
            			tmp = self.text[::-1].find("\n")

            			if(tmp!=-1):
            				self.text = self.text[0:len(self.text)-tmp-1]
            				print("Linux case: "+self.text)
            				raise UncloseString(self.text)
            				return

            	raise UncloseString(self.text)

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

            	self.text = self.text[1:]
            	print("this is illegal escape: "+self.text)
            	raise IllegalEscape(self.text)
            	

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise ErrorToken(self.text)
     


